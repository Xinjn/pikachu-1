{"version":3,"sources":["css.js","test.js"],"names":["string","player","ui","demo","document","querySelector","demo2","id","undefined","time","events","n","bindEvents","key","hasOwnProperty","value","onclick","init","innerText","substr","innerHTML","play","run","length","pause","scrollTop","scrollHeight","setInterval","window","clearInterval","slow","normal","fast"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,ywGAAZ;eA4LeA;;;;;AC1Lf;;;;AAFA;AACA;AAC6B;AAG7B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA,IAAMC,MAAM,GAAG;AACXC,EAAAA,EAAE,EAAE;AAAC;AACDC,IAAAA,IAAI,EAAEC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CADN;AAEAC,IAAAA,KAAK,EAAEF,QAAQ,CAACC,aAAT,CAAuB,QAAvB;AAFP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","file":"test.1d06ffcb.js","sourceRoot":"..\\src","sourcesContent":["const string = `.skin *{box-sizing: border-box;margin: 0;padding: 0;}\r\n.skin *::before, .skin *::after{box-sizing: border-box;}\r\n\r\n.skin{\r\n  background: #ffe600;\r\n  min-height: 50vh;\r\n  position: relative;\r\n}\r\n.nose{\r\n  border: 10px solid black;\r\n  border-color: black transparent transparent;\r\n  border-bottom: none;\r\n  width: 0px;\r\n  height: 0px;\r\n  position: relative;\r\n  left: 50%;\r\n  top: 145px;\r\n  margin-left: -10px;\r\n  z-index: 10;\r\n}\r\n@keyframes wave{\r\n  0%{\r\n    transform: rotate(0deg);\r\n}\r\n  33%{\r\n    transform: rotate(5deg);\r\n}\r\n  66%{\r\n    transform: rotate(-5deg);\r\n}\r\n  100%{\r\n    transform: rotate(0deg);\r\n}\r\n\r\n}\r\n.nose:hover{\r\n  transform-origin: center bottom;\r\n  animation: wave 300ms infinite linear;\r\n}\r\n\r\n.yuan{\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 6px;\r\n  top: -16px;\r\n  left: -10px;\r\n  border-radius: 10px 10px 0 0;\r\n  background: black;\r\n}\r\n\r\n.eye {\r\n  border: 2px solid #000;\r\n  width: 64px;\r\n  height: 64px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 100px;\r\n  margin-left: -32px;\r\n  background: #2e2e2e;\r\n  border-radius: 50%;\r\n}\r\n.eye::before{\r\n  content: '';\r\n  display: block;\r\n  border: 3px solid #000;\r\n  width: 30px;\r\n  height: 30px;\r\n  background: #fff;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  left: 4px;\r\n  top: 2px;\r\n}\r\n.eye.left{\r\n  transform: translateX(-100px);\r\n}\r\n.eye.right{\r\n  transform: translateX(100px);\r\n}\r\n.mouth{\r\n  width: 200px;\r\n  height: 200px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 170px;\r\n  margin-left: -100px;\r\n}\r\n.mouth .up{\r\n  position: relative;\r\n  top: -20px;\r\n  z-index: 1;\r\n}\r\n.mouth .up .lip{\r\n  border: 3px solid black;\r\n  height: 30px;\r\n  width: 100px;\r\n  background: #ffe600;\r\n  border-top-color: transparent;\r\n  border-right-color: transparent;\r\n  position: relative;\r\n  position: absolute;\r\n  left: 50%;\r\n  margin-left: -50px;\r\n}\r\n.mouth .up .lip.left{\r\n  border-radius: 0 0 0 50px;\r\n  transform: rotate(-15deg) translateX(-53px);\r\n}\r\n.mouth .up .lip.right{\r\n  border-radius: 0 0 50px 0px;\r\n  transform: rotate(15deg) translateX(53px);\r\n}\r\n.mouth .up .lip::before{\r\n  content: '';\r\n  display: block;\r\n  width: 7px;\r\n  height: 30px;\r\n  position: absolute;\r\n  bottom: 0;\r\n  background: #ffe600;\r\n}\r\n.mouth .up .lip.left::before{\r\n  right: -6px;\r\n\r\n}\r\n.mouth .up .lip.right::before{\r\n  left: -6px;\r\n}\r\n.mouth .down{\r\n  height: 180px;\r\n  position: absolute;\r\n  top: 5px;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n.mouth .down .yuan1{\r\n  border: 3px solid black;\r\n  width: 150px;\r\n  height: 1000px;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  margin-left: -75px;\r\n  border-radius: 75px/300px;\r\n  background: #9b000a;\r\n  overflow: hidden;\r\n}\r\n.mouth .down .yuan1 .yuan2{\r\n  width: 200px;\r\n  height: 300px;\r\n  background: #ff485f;\r\n  position: absolute;\r\n  bottom: -155px;\r\n  left: 50%;\r\n  margin-left: -100px;\r\n  border-radius: 100px;\r\n\r\n}\r\n.face{\r\n  position: absolute;\r\n  left: 50%;\r\n  border: 3px solid black;\r\n  width: 88px;\r\n  height: 88px;\r\n  top: 200px;\r\n  margin-left: -44px;\r\n  z-index: 3;\r\n}\r\n.face > img{\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.face.left{\r\n  transform: translateX(-180px);\r\n  background: #ff0000;\r\n  border-radius: 50%;\r\n}\r\n.face.left > img{\r\n  transform: rotateY(180deg);\r\n  transform-origin: 0 0;\r\n}\r\n.face.right{\r\n  transform: translateX(180px);\r\n  background: #ff0000;\r\n  border-radius: 50%;\r\n}\r\n`\r\nexport default string;","// const string = ``不再直接写入style代码(字符串),太多\r\n// 新方法:放入新建的css.js里，然通过import引入\r\nimport string from './css.js'//string的名字自定义,但需要与css.js中的名字一致\r\n\r\n\r\n// let n = 1\r\n// demo.innerText = string.substr(0, n)\r\n// demo2.innerHTML = string.substr(0, n)\r\n// console.log(n)\r\n\r\n// setInterval(() => {\r\n//     n += 1\r\n//     demo.innerHTML = string.substr(0, n)\r\n//     // console.log(n + ':' + string.substr(0, n))\r\n// }, 100)\r\n\r\n// //时间间隔\r\n// let time = 100\r\n\r\n// //后面需要写两次重复的,function封装下\r\n// const run = () => {\r\n//     n += 1\r\n//     if (n > string.length) {//停止计时器\r\n//         window.clearInterval(id)\r\n//         return\r\n//     }\r\n//     demo.innerText = string.substr(0, n)\r\n//     demo2.innerHTML = string.substr(0, n)\r\n//     // demo.scrollTop = 99999//粗暴\r\n//     demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//     // console.log(n + ':' + string.substr(0, n))\r\n// }\r\n// //传入封装好的代码,直接调用即可\r\n// let id = setInterval(() => {//需提前声明变量名--'id'才能调用\r\n//     run()\r\n// }, time)\r\n\r\n// //暂停,杀死计时器\r\n// btnPause.onclick = () => {\r\n//     window.clearInterval(id)//需提前声明变量名--'id'\r\n// }\r\n\r\n// //播放,新建计时器\r\n// btnPlay.onclick = () => {\r\n//     //第二次传入封装好的代码,直接调用即可\r\n//     id = setInterval(() => {//需提前声明变量名--'id'才能调用\r\n//         run()\r\n//     }, time)\r\n// }\r\n\r\n// //慢速按钮(先杀死,在新建)\r\n// btnSlow.onclick = () => {\r\n//     window.clearInterval(id)\r\n//     time = 300\r\n//     id = setInterval(() => {//需提前声明变量名--'id'才能调用\r\n//         run()\r\n//     }, time)\r\n// }\r\n\r\n// //中速按钮(先杀死,在新建)\r\n// btnNormal.onclick = () => {\r\n//     window.clearInterval(id)\r\n//     time = 100\r\n//     id = setInterval(() => {//需提前声明变量名--'id'才能调用\r\n//         run()\r\n//     }, time)\r\n// }\r\n\r\n// //快速速按钮(先杀死,在新建)\r\n// btnFast.onclick = () => {\r\n//     window.clearInterval(id)\r\n//     time = 0\r\n//     id = setInterval(() => {//需提前声明变量名--'id'才能调用\r\n//         run()\r\n//     }, time)\r\n// }\r\n\r\n//____________________________________________\r\n// let n = 1\r\n// demo.innerText = string.substr(0, n)\r\n// demo2.innerHTML = string.substr(0, n)\r\n\r\n//代码世界:丑--重复就是丑!!垃圾!!不能重复!!!老前端带你写代码！\r\n//优化代码：\r\n// setInterval(() => {\r\n//         run()\r\n//     }, time)\r\n\r\n// 拓展：\r\n// const x = () => {\r\n//     run()\r\n// }\r\n// x 和 run() 是否等价？\r\n// 答案：当然等价了！！！x === run 函数相等\r\n\r\n// 所以\r\n// const x = () => {\r\n//     run()\r\n// }\r\n// 等价于\r\n// const x = (run)//注意此处不能写run()不然是函数的返回值！函数不加括号是函数的返回值\r\n// 示例：\r\n// //快速速按钮(先杀死,在新建)\r\n// btnFast.onclick = () => {\r\n//     window.clearInterval(id)\r\n//     time = 0\r\n//     id = setInterval(run, time)//run后不能加()，加了就不是函数了，是函数的返回值！！！\r\n// }\r\n\r\n// //时间间隔\r\n// let time = 100\r\n\r\n// //后面需要写两次重复的,function封装下\r\n// const run = () => {\r\n//     n += 1\r\n//     if (n > string.length) {//停止计时器\r\n//         pause()\r\n//         return\r\n//     }\r\n//     demo.innerText = string.substr(0, n)\r\n//     demo2.innerHTML = string.substr(0, n)\r\n//     // demo.scrollTop = 99999//粗暴\r\n//     demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//     // console.log(n + ':' + string.substr(0, n))\r\n// }\r\n\r\n// // 优化代码：\r\n// // id = setInterval(run, time)\r\n// const play = () => {//封装运行\r\n//     return setInterval(run, time)\r\n// }\r\n\r\n\r\n// // 优化代码：\r\n// // window.clearInterval(id)\r\n// const pause = () => {\r\n//     window.clearInterval(id)//封装杀死\r\n// }\r\n\r\n// let id = play();//把play的结果返回id\r\n\r\n// //暂停,杀死计时器\r\n// btnPause.onclick = () => {\r\n//     pause()\r\n// }\r\n\r\n// //播放,新建计时器\r\n// btnPlay.onclick = () => {\r\n//     //第二次传入封装好的代码,直接调用即可\r\n//     id = play()\r\n// }\r\n\r\n// //慢速按钮(先杀死,在新建)\r\n// btnSlow.onclick = () => {\r\n//     pause()\r\n//     time = 300\r\n//     id = play()\r\n// }\r\n\r\n// //中速按钮(先杀死,在新建)\r\n// btnNormal.onclick = () => {\r\n//     pause()\r\n//     time = 100\r\n//     id = play()\r\n// }\r\n\r\n// //快速速按钮(先杀死,在新建)\r\n// btnFast.onclick = () => {\r\n//     pause()\r\n//     time = 0\r\n//     id = play()\r\n// }\r\n\r\n//____________________________________________\r\n// let n = 1\r\n// demo.innerText = string.substr(0, n)\r\n// demo2.innerHTML = string.substr(0, n)\r\n//还是丑（老前端）使用面向对象的方法进行再次优化！！！\r\n// 把按钮监听函数也做成封装函数！！牛逼\r\n\r\n\r\n// //时间间隔\r\n// let time = 100\r\n\r\n// //后面需要写两次重复的,function封装下\r\n// const run = () => {\r\n//     n += 1\r\n//     if (n > string.length) {//停止计时器\r\n//         pause()\r\n//         return\r\n//     }\r\n//     demo.innerText = string.substr(0, n)\r\n//     demo2.innerHTML = string.substr(0, n)\r\n//     // demo.scrollTop = 99999//粗暴\r\n//     demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//     // console.log(n + ':' + string.substr(0, n))\r\n// }\r\n\r\n// // 优化代码：\r\n// // id = setInterval(run, time)\r\n// const play = () => {//封装运行\r\n//     return setInterval(run, time)\r\n// }\r\n\r\n\r\n// // 优化代码：\r\n// // window.clearInterval(id)\r\n// const pause = () => {\r\n//     window.clearInterval(id)//封装杀死\r\n// }\r\n\r\n// let id = play();//把play的结果返回id\r\n\r\n// //暂停,杀死计时器\r\n// btnPause.onclick = pause//等价变形\r\n\r\n\r\n// //播放,新建计时器\r\n// btnPlay.onclick = () => {\r\n//     //第二次传入封装好的代码,直接调用即可\r\n//     id = play()\r\n// }\r\n\r\n\r\n// const slow = () => {\r\n//     pause()\r\n//     time = 300\r\n//     id = play()\r\n// }\r\n// //慢速按钮(先杀死,在新建)\r\n// btnSlow.onclick = () => {\r\n//     slow()//已经在上面封装，而且与直接slow等价，不需要箭头函数，再次优化\r\n\r\n// }\r\n// //等价变形原理：如果一个函数什么也没干，只是调用另一个函数，就是一句废话！使用等价变形进行优化\r\n// btnSlow.onclick = slow//注意不能加括号，加了就会立即调用\r\n\r\n\r\n// //继续先封装再等价变形！\r\n// const normal = () => {\r\n//     pause()\r\n//     time = 100\r\n//     id = play()\r\n// }\r\n// //中速按钮(先杀死,在新建)\r\n// btnNormal.onclick = normal\r\n\r\n\r\n// //继续先封装再等价变形！\r\n// const fast = () => {\r\n//     pause()\r\n//     time = 0\r\n//     id = play()\r\n// }\r\n// //快速速按钮(先杀死,在新建)\r\n// btnFast.onclick = fast\r\n\r\n//____________________________________________\r\n//这个一个函数都是在操作播放器（player），把几个函数组织到一起变成对象（那么可以把这些函数放到播放器里），形成一个大播放器的内置函数（类似原型/属性）！针对这些函数进行封装，挂到大播放器里面\r\n// 但是要注意：现在的函数变成了播放器的内置函数，调用函数时必须要加player！\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// demo.innerText = string.substr(0, n)\r\n// demo2.innerHTML = string.substr(0, n)\r\n// //时间间隔\r\n// let time = 100\r\n\r\n// const player = {\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         return setInterval(player.run, time)\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         id = player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         id = player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         id = player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// let id = player.play();//把play的结果返回id\r\n\r\n// //暂停,杀死计时器\r\n// //首先正规获取！\r\n// document.querySelector('#btnPause')\r\n//     .onclick = player.pause//等价变形\r\n\r\n// //播放,新建计时器\r\n// //首先正规获取！\r\n// document.querySelector('#btnPlay')\r\n//     .onclick = () => {\r\n//         //第二次传入封装好的代码,直接调用即可\r\n//         id = player.play()\r\n//     }\r\n\r\n// //慢速按钮(先杀死,在新建)\r\n// //已经在上面封装，而且与直接slow等价，不需要箭头函数，再次优化\r\n// //等价变形原理：如果一个函数什么也没干，只是调用另一个函数，就是一句废话！使用等价变形进行优化\r\n// //首先正规获取！\r\n// document.querySelector('#btnSlow')\r\n//     .onclick = player.slow//注意不能加括号，加了就会立即调用\r\n\r\n// //中速按钮(先杀死,在新建)\r\n// //首先正规获取！\r\n// document.querySelector('#btnNormal')\r\n//     .onclick = player.normal\r\n\r\n// //快速速按钮(先杀死,在新建)\r\n// //首先正规获取！\r\n// document.querySelector('#btnFast')\r\n//     .onclick = player.fast\r\n\r\n\r\n// //____________________________________________\r\n// //继续丑！！把前面的声明变成初始化（init）方法也写入自身！！继续牛逼\r\n// // init: () => {\r\n// //     demo.innerText = string.substr(0, n)\r\n// //     demo2.innerHTML = string.substr(0, n)\r\n// //     id = player.play();//把play的结果返回id\r\n// // },\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         id = player.play();//把play的结果返回id\r\n//     },\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         return setInterval(player.run, time)\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         id = player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         id = player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         id = player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n\r\n// //暂停,杀死计时器\r\n// //首先正规获取！\r\n// document.querySelector('#btnPause')\r\n//     .onclick = player.pause//等价变形\r\n\r\n// //播放,新建计时器\r\n// //首先正规获取！\r\n// document.querySelector('#btnPlay')\r\n//     .onclick = () => {\r\n//         //第二次传入封装好的代码,直接调用即可\r\n//         id = player.play()\r\n//     }\r\n\r\n// //慢速按钮(先杀死,在新建)\r\n// //已经在上面封装，而且与直接slow等价，不需要箭头函数，再次优化\r\n// //等价变形原理：如果一个函数什么也没干，只是调用另一个函数，就是一句废话！使用等价变形进行优化\r\n// //首先正规获取！\r\n// document.querySelector('#btnSlow')\r\n//     .onclick = player.slow//注意不能加括号，加了就会立即调用\r\n\r\n// //中速按钮(先杀死,在新建)\r\n// //首先正规获取！\r\n// document.querySelector('#btnNormal')\r\n//     .onclick = player.normal\r\n\r\n// //快速速按钮(先杀死,在新建)\r\n// //首先正规获取！\r\n// document.querySelector('#btnFast')\r\n//     .onclick = player.fast\r\n\r\n\r\n// //____________________________________________\r\n// //还是丑！！每次调用play的结果都返回给id！！内置play\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         player.play();//每次调用play的结果都返回给id\r\n//     },\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n//         id = setInterval(player.run, time);\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n// //暂停,杀死计时器\r\n// //首先正规获取！\r\n// document.querySelector('#btnPause')\r\n//     .onclick = player.pause//等价变形\r\n\r\n// //播放,新建计时器\r\n// //首先正规获取！\r\n// document.querySelector('#btnPlay')\r\n//     .onclick = player.play //第二次传入封装好的代码,直接调用即可\r\n\r\n// //慢速按钮(先杀死,在新建)\r\n// //已经在上面封装，而且与直接slow等价，不需要箭头函数，再次优化\r\n// //等价变形原理：如果一个函数什么也没干，只是调用另一个函数，就是一句废话！使用等价变形进行优化\r\n// //首先正规获取！\r\n// document.querySelector('#btnSlow')\r\n//     .onclick = player.slow//注意不能加括号，加了就会立即调用\r\n\r\n// //中速按钮(先杀死,在新建)\r\n// //首先正规获取！\r\n// document.querySelector('#btnNormal')\r\n//     .onclick = player.normal\r\n\r\n// //快速速按钮(先杀死,在新建)\r\n// //首先正规获取！\r\n// document.querySelector('#btnFast')\r\n//     .onclick = player.fast\r\n\r\n\r\n\r\n// //____________________________________________\r\n// //丑丑丑！！为什么不把监听函数也放到（绑定到）函数的初始化里呢！牛牛牛！\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         player.play();//每次调用play的结果都返回给id\r\n//         //暂停,杀死计时器\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnPause')\r\n//             .onclick = player.pause//等价变形\r\n\r\n//         //播放,新建计时器\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnPlay')\r\n//             .onclick = player.play //第二次传入封装好的代码,直接调用即可\r\n\r\n//         //慢速按钮(先杀死,在新建)\r\n//         //已经在上面封装，而且与直接slow等价，不需要箭头函数，再次优化\r\n//         //等价变形原理：如果一个函数什么也没干，只是调用另一个函数，就是一句废话！使用等价变形进行优化\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnSlow')\r\n//             .onclick = player.slow//注意不能加括号，加了就会立即调用\r\n\r\n//         //中速按钮(先杀死,在新建)\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnNormal')\r\n//             .onclick = player.normal\r\n\r\n//         //快速速按钮(先杀死,在新建)\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnFast')\r\n//             .onclick = player.fast\r\n//     },\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n//         id = setInterval(player.run, time);\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n\r\n// //____________________________________________\r\n// //丑爆了！！把函数的初始化里的监听函数还是重复！！声明绑定函数,然后再初始话调用函数即可！！继续优化！牛牛牛！\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         player.play();//每次调用play的结果都返回给id\r\n//         player.bindEvents()\r\n//     },\r\n//     bindEvents: () => {\r\n//         //暂停,杀死计时器\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnPause')\r\n//             .onclick = player.pause//等价变形\r\n\r\n//         //播放,新建计时器\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnPlay')\r\n//             .onclick = player.play //第二次传入封装好的代码,直接调用即可\r\n\r\n//         //慢速按钮(先杀死,在新建)\r\n//         //已经在上面封装，而且与直接slow等价，不需要箭头函数，再次优化\r\n//         //等价变形原理：如果一个函数什么也没干，只是调用另一个函数，就是一句废话！使用等价变形进行优化\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnSlow')\r\n//             .onclick = player.slow//注意不能加括号，加了就会立即调用\r\n\r\n//         //中速按钮(先杀死,在新建)\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnNormal')\r\n//             .onclick = player.normal\r\n\r\n//         //快速速按钮(先杀死,在新建)\r\n//         //首先正规获取！\r\n//         document.querySelector('#btnFast')\r\n//             .onclick = player.fast\r\n//     },\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n//         id = setInterval(player.run, time);\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n\r\n// //____________________________________________\r\n// //丑出天际！！继续优化！继续把重复的绑定函数（bindEvents）优化，现在只有选择器和调用的函数不一样，其他都一样！！通过数据结构（哈希表）！牛逼思路！\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         player.play();//每次调用play的结果都返回给id\r\n//         player.bindEvents()\r\n//     },\r\n//     //数据结构:哈希表：一一对应\r\n//     // const hashTable = {\r\n//     //     '#btnPause': player.play,\r\n//     //     '#btnPlay': player.play,\r\n//     //     '#btnSlow': player.slow,\r\n//     //     '#btnNormal': player.normal,\r\n//     //     '#btnFast': player.fast\r\n//     // }\r\n//     //换个名字events事件\r\n//     events: {\r\n//         '#btnPause': player.play,\r\n//         '#btnPlay': player.play,\r\n//         '#btnSlow': player.slow,\r\n//         '#btnNormal': player.normal,\r\n//         '#btnFast': player.fast\r\n//     },\r\n//     bindEvents: () => {\r\n//         //遍历哈希表,通过key和value调用\r\n//         for (let key in events) {\r\n//             // //获取值value//value只使用了一次，太繁琐优化\r\n//             // const value = hashTable[key]\r\n//             // document.querySelector(key).onclick = value\r\n\r\n//             //优化后\r\n//             document.querySelector(key).onclick = events[key]\r\n\r\n//         }\r\n//     },\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n//         id = setInterval(player.run, time);\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n\r\n// //____________________________________________\r\n// //丑！！还有bug！你不能再声明这个对象的时候，还用这个对象\r\n// // 比如：就是错误的\r\n// // var a = {\r\n// //     xxx:a\r\n// // }\r\n// // a 为 undefined\r\n// //events放到bindEvents里面是可以的，因为是异步\r\n// //events放到外边的话，value就不能使用这个对象player，需要变成字符串\r\n// //\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         player.play();//每次调用play的结果都返回给id\r\n//         player.bindEvents()\r\n//     },\r\n//     //数据结构:哈希表：一一对应\r\n//     // const hashTable = {\r\n//     //     '#btnPause': player.play,\r\n//     //     '#btnPlay': player.play,\r\n//     //     '#btnSlow': player.slow,\r\n//     //     '#btnNormal': player.normal,\r\n//     //     '#btnFast': player.fast\r\n//     // }\r\n//     //换个名字events事件\r\n//     events: {\r\n//         '#btnPause': 'play',\r\n//         '#btnPlay': 'play',\r\n//         '#btnSlow': 'slow',\r\n//         '#btnNormal': 'normal',\r\n//         '#btnFast': 'fast'\r\n//     },\r\n//     bindEvents: () => {//精髓！！！66666\r\n//         //遍历哈希表,通过key和value调用\r\n//         for (let key in player.events) {//注意修改为player开头\r\n//             //获取value\r\n//             const value = player.events[key]//events[key]=== pause/play/slow。。\r\n\r\n//             document.querySelector(key).onclick = player[value]//重点：player去获取相应的字符串【value】然后对应到play的函数\r\n//         }\r\n//     },\r\n\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n//         id = setInterval(player.run, time);\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n\r\n// //____________________________________________\r\n// //丑！！还有bug！BUG:有可能遍历到player.events继承的对象\r\n// // 猪队友有可能会手贱写了句: Object.prototype.x = 1\r\n// // console(key)=>当遍历key就会遍历到x(不需要的x)\r\n// //需要加入重要的防御性编程！！！！！！！！！牛逼\r\n\r\n// // bindEvents: () => {\r\n// //     for (let key in player.events) {//BUG:遍历player.events有可能遍历到player.events继承的对象\r\n// //         const value = player.events[key]\r\n// //         document.querySelector(key).onclick = player[value]\r\n// //     }\r\n// // },\r\n\r\n\r\n// //正规写法：先获取！！\r\n// const demo = document.querySelector('#demo')\r\n// const demo2 = document.querySelector('#demo2')\r\n\r\n// let n = 1\r\n// //时间间隔\r\n// let time = 100\r\n// let id\r\n\r\n// const player = {\r\n//     init: () => {\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         player.play();//每次调用play的结果都返回给id\r\n//         player.bindEvents()\r\n//     },\r\n//     //数据结构:哈希表：一一对应\r\n//     // const hashTable = {\r\n//     //     '#btnPause': player.play,\r\n//     //     '#btnPlay': player.play,\r\n//     //     '#btnSlow': player.slow,\r\n//     //     '#btnNormal': player.normal,\r\n//     //     '#btnFast': player.fast\r\n//     // }\r\n//     //换个名字events事件\r\n//     events: {\r\n//         '#btnPause': 'pause',\r\n//         '#btnPlay': 'play',\r\n//         '#btnSlow': 'slow',\r\n//         '#btnNormal': 'normal',\r\n//         '#btnFast': 'fast'\r\n//     },\r\n//     bindEvents: () => {//精髓！！！66666\r\n//         //遍历哈希表,通过key和value调用\r\n//         for (let key in player.events) {//注意修改为player开头\r\n//             if (player.events.hasOwnProperty(key)) {//防御性编程：如果key时player.events的自身属性则再运行代码，不考虑继承代码\r\n//                 //获取value\r\n//                 const value = player.events[key]//events[key]=== pause/play/slow。。\r\n\r\n//                 document.querySelector(key).onclick = player[value]//重点：player去获取相应的字符串【value】然后对应到play的函数\r\n//             }\r\n\r\n//         }\r\n//     },\r\n\r\n//     //后面需要写两次重复的,function封装下\r\n//     run: () => {\r\n//         n += 1\r\n//         if (n > string.length) {//停止计时器\r\n//             player.pause()\r\n//             return\r\n//         }\r\n//         demo.innerText = string.substr(0, n)\r\n//         demo2.innerHTML = string.substr(0, n)\r\n//         // demo.scrollTop = 99999//粗暴\r\n//         demo.scrollTop = demo.scrollHeight//当前页面滚动条的最大高度\r\n//         // console.log(n + ':' + string.substr(0, n))\r\n//     },\r\n//     // 优化代码：\r\n//     // id = setInterval(run, time)\r\n//     play: () => {//封装运行\r\n//         // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n//         id = setInterval(player.run, time);\r\n//     },\r\n//     // 优化代码：\r\n//     // window.clearInterval(id)\r\n//     pause: () => {\r\n//         window.clearInterval(id)//封装杀死\r\n//     },\r\n//     slow: () => {\r\n//         player.pause()\r\n//         time = 300\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     normal: () => {\r\n//         player.pause()\r\n//         time = 100\r\n//         player.play()\r\n//     },\r\n//     //继续先封装再等价变形！\r\n//     fast: () => {\r\n//         player.pause()\r\n//         time = 0\r\n//         player.play()\r\n//     }\r\n\r\n// }\r\n\r\n// player.init()//只需要调用初始化即可！\r\n\r\n\r\n//____________________________________________\r\n//最终大魔王！！丑丑！！始终都有优化的空间！！！不能容忍除了一个对象player和一个初始化，竟然还有其他的东西！！不能！！都放到自身上去\r\n\r\nconst player = {\r\n    ui: {//比较特殊：是界面上的元素,单独用对象包裹\r\n        demo: document.querySelector('#demo'),\r\n        demo2: document.querySelector('#demo2')\r\n    },\r\n    id: undefined,//默认undefin\r\n    time: 100,\r\n    events: {\r\n        '#btnPause': 'pause',\r\n        '#btnPlay': 'play',\r\n        '#btnSlow': 'slow',\r\n        '#btnNormal': 'normal',\r\n        '#btnFast': 'fast'\r\n    },\r\n    n: 1,//let n=1 把n放入对象身上就变成的自身属性，所有调用n的地方揩油都需要加player\r\n    bindEvents: () => {//精髓！！！66666\r\n        //遍历哈希表,通过key和value调用\r\n        for (let key in player.events) {//注意修改为player开头\r\n            if (player.events.hasOwnProperty(key)) {//防御性编程：如果key时player.events的自身属性则再运行代码，不考虑继承代码\r\n                //获取value\r\n                const value = player.events[key]//events[key]=== pause/play/slow。。\r\n\r\n                document.querySelector(key).onclick = player[value]//重点：player去获取相应的字符串【value】然后对应到play的函数\r\n            }\r\n\r\n        }\r\n    },\r\n    init: () => {\r\n        player.ui.demo.innerText = string.substr(0, player.n)\r\n        player.ui.demo2.innerHTML = string.substr(0, player.n)\r\n        player.bindEvents()\r\n        player.play()//每次调用play的结果都返回给id\r\n    },\r\n    //数据结构:哈希表：一一对应\r\n    // const hashTable = {\r\n    //     '#btnPause': player.play,\r\n    //     '#btnPlay': player.play,\r\n    //     '#btnSlow': player.slow,\r\n    //     '#btnNormal': player.normal,\r\n    //     '#btnFast': player.fast\r\n    // }\r\n    //换个名字events事件\r\n\r\n\r\n    //后面需要写两次重复的,function封装下\r\n    run: () => {\r\n        player.n += 1\r\n        if (player.n > string.length) {//停止计时器\r\n            player.pause()\r\n            return\r\n        }\r\n        player.ui.demo.innerText = string.substr(0, player.n)\r\n        player.ui.demo2.innerHTML = string.substr(0, player.n)\r\n        // demo.scrollTop = 99999//粗暴\r\n        player.ui.demo.scrollTop = player.ui.demo.scrollHeight//当前页面滚动条的最大高度\r\n        // console.log(n + ':' + string.substr(0, n))\r\n    },\r\n    // 优化代码：\r\n    // id = setInterval(run, time)\r\n    play: () => {//封装运行\r\n        // return setInterval(player.run, time)//优化变成内置play并赋值给id，外面就不需要再赋值\r\n        player.id = setInterval(player.run, player.time);\r\n    },\r\n    // 优化代码：\r\n    // window.clearInterval(id)\r\n    pause: () => {\r\n        window.clearInterval(player.id)//封装杀死\r\n    },\r\n    slow: () => {\r\n        player.pause()\r\n        player.time = 300\r\n        player.play()\r\n    },\r\n    //继续先封装再等价变形！\r\n    normal: () => {\r\n        player.pause()\r\n        player.time = 100\r\n        player.play()\r\n    },\r\n    //继续先封装再等价变形！\r\n    fast: () => {\r\n        player.pause()\r\n        player.time = 0\r\n        player.play()\r\n    }\r\n\r\n}\r\n\r\nplayer.init()//只需要调用初始化即可！"]}